Note:  You can set the email notification address on the line with the sbatch command as follows:-
       sbatch --mail-user=yourname@nsidc.org run_setup_year.sh yyyy Fxx

For multiple users, you can include a double-quoted, comma-separated list.
       
1.  Transfer all of the input files to summit
    1a. Start a processing info file, e.g. /projects/moha2290/F16_info to
    keep track of notes on files and days processed.

2.  Take note of the start doy, end doy, total doys, total number
    of input files
    2a. Copy the requisite shell scripts from
    /projects/moha2290/summit/measures-byu/CETB_process/scripts
    2b. Note that for SMM/I and SSMIS, you will generate 42 setup
    files per day and 84 *.nc data files per day

3.  Run nc_to_gsx.sh to create script in the scripts directory
called gsx_lb_list_summit to convert input to gsx - arguments
SSMIS-CSU and source (F18 e.g.)

4.  Verify contents of generated file with head, tail and wc -l (should have same number of lines as files)

5.  use sbatch run_gsx.sh Fxx to create gsx files files and verfiy file count in xxx_GSX directory
    5a. Use squeue --user=$USER --long to monitor the queue activity

6.  run daily_file_lists.sh to create list of input files for each day in series - these are stored in xxx_lists
    	arguments are year, start_doy, end_doy, platform i.e. yyy ddd ddd Fxx

7.  run file_3day.sh to create list of input files for NS projections for each day in series
    	arguments are yyyy ddd ddd Fxx

8.  count to confirm the correct number of files created, 2 files
    per day for total number of days

9.  use grep to check for no "such" messages in files created -
    should only be in NS files for first and last doys - this is
    useful because it will also show if there are missing days of
    files

10. use sed to edit files to remove missing file messages
    	grep -l such ../Fxx_lists/* | xargs sed -i '/such/d'

11. run SSMIS_make.sh to create lists for make process

12. count number of lines in input file to run_make, there should
    be 4 * number of days to process

13. sbatch run_make.sh, takes 1 argument F18 or whichever
    platform - to generate make files for setup process - files
    are stored in xxx_make

From this point processing should proceed by year.  (Note that 1
year of SSMIS setup files is around 15 - 17 TB, so plan
accordingly.)

14. execute SSMIS_setup_year.sh with arguments of 4-digit year
    and platform to generate list of commands for loadbalancer

15. sbatch run_setup_year.sh with arguments of yyyy Fxx to run 1
    year -- only run 3 of these at one time

16. after completion, execute SSMIS_sir_year.sh to create list of
    sir commands for loadbalancer

17. sbatch run_sir_year.sh with yyyy and Fxx as arguments

18. execute SSMIS_setup_rm_year.sh with yyyy Fxx arguments to
    create list of setup files to remove

19. sbatch run_setup_rm_year.sh yyyy Fxx, with dependency as
    follows:-

    sbatch --dependency=afterok:jobid_from_sir run_setup_rm_year.sh yyyy Fxx

20. at this point I usually edit the list of sir commands using
    sed to create the lists for further years

21. also edit the list of setup rm commands with sed to change
    year

22. Now you can proceed to chain setup, sir and setup_rm jobs
    with dependencies.


Once the processing has completed, you have to move the files
around and run the premet and spatial file generation

1.  Edit the script file_create_dirs.sh to correspond to the
    years of data - takes the platform as argument

2.  Execute the script file_move_dir.sh (yyyy, Fxx and
    type as arguments) to create a list of mv commands by year
    cat all of the output files into moving_files_all

3.  sbatch run_mv_files.sh to move the files - single argument is Fxx (src) 

4.  execute premetandspatial.sh with Fxx as argument to generate
    list for loadbalancer

5.  sbatch run_premet_cetb.sh with Fxx as the argument

6.  run manifest.sh to create the manifest list for OPS

7.  Send email to DAAC about new batch of processing, wait for
    DAAC confirmation of ingest before deleting Fxx_sir.  Save
    the Fxx_scripts directory to someplace off scratch.